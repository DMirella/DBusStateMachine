/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201801251447.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_LUXOFT_HUMANCHARACTERSERVICE_HUMAN_CHARACTER_SERVICE_HPP_
#define V1_COM_LUXOFT_HUMANCHARACTERSERVICE_HUMAN_CHARACTER_SERVICE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace luxoft {
namespace humancharacterservice {

class HumanCharacterService {
public:
    virtual ~HumanCharacterService() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct Arm : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LEFT = 0,
            RIGHT = 1
        };
    
        Arm()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LEFT)) {}
        Arm(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LEFT):
                case static_cast< int32_t>(Literal::RIGHT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Arm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Arm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Arm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Arm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Arm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Arm &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
};

const char* HumanCharacterService::getInterface() {
    return ("com.luxoft.humancharacterservice.HumanCharacterService:v1_0");
}

CommonAPI::Version HumanCharacterService::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace humancharacterservice
} // namespace luxoft
} // namespace com
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_LUXOFT_HUMANCHARACTERSERVICE_HUMAN_CHARACTER_SERVICE_HPP_
