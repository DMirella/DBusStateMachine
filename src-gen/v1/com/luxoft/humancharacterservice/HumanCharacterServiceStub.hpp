/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201801251447.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_LUXOFT_HUMANCHARACTERSERVICE_Human_Character_Service_STUB_HPP_
#define V1_COM_LUXOFT_HUMANCHARACTERSERVICE_Human_Character_Service_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/com/luxoft/humancharacterservice/HumanCharacterService.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace luxoft {
namespace humancharacterservice {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service HumanCharacterService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class HumanCharacterServiceStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual HumanCharacterService {
 public:



    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for HumanCharacterService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HumanCharacterServiceStubRemoteEvent
{
public:
    virtual ~HumanCharacterServiceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service HumanCharacterService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HumanCharacterServiceStub
    : public virtual CommonAPI::Stub<HumanCharacterServiceStubAdapter, HumanCharacterServiceStubRemoteEvent>
{
public:
    typedef std::function<void (std::string _result)>ArmsUpReply_t;
    typedef std::function<void (std::string _result)>ArmsDownReply_t;

    virtual ~HumanCharacterServiceStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /// This is the method that will be called on remote calls on the method ArmsUp.
    virtual void ArmsUp(const std::shared_ptr<CommonAPI::ClientId> _client, ArmsUpReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method ArmsDown.
    virtual void ArmsDown(const std::shared_ptr<CommonAPI::ClientId> _client, ArmsDownReply_t _reply) = 0;

    
    using CommonAPI::Stub<HumanCharacterServiceStubAdapter, HumanCharacterServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<HumanCharacterServiceStubAdapter, HumanCharacterServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<HumanCharacterServiceStubAdapter, HumanCharacterServiceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef HumanCharacterServiceStubRemoteEvent RemoteEventType;
    typedef HumanCharacterService StubInterface;
};

} // namespace humancharacterservice
} // namespace luxoft
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_LUXOFT_HUMANCHARACTERSERVICE_Human_Character_Service_STUB_HPP_
