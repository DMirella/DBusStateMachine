/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/luxoft/humancharacterservice/HumanCharacterServiceDBusProxy.hpp>

namespace v1 {
namespace com {
namespace luxoft {
namespace humancharacterservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createHumanCharacterServiceDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< HumanCharacterServiceDBusProxy>(_address, _connection);
}

void initializeHumanCharacterServiceDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        HumanCharacterService::getInterface(),
        &createHumanCharacterServiceDBusProxy);
}

INITIALIZER(registerHumanCharacterServiceDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeHumanCharacterServiceDBusProxy);
}

HumanCharacterServiceDBusProxy::HumanCharacterServiceDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



    void HumanCharacterServiceDBusProxy::ArmUp(const HumanCharacterService::Arm &_arm, CommonAPI::CallStatus &_internalCallStatus, std::string &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment> deploy_arm(_arm, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_result(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodWithReply(
        *this,
        "ArmUp",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_arm,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> HumanCharacterServiceDBusProxy::ArmUpAsync(const HumanCharacterService::Arm &_arm, ArmUpAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment> deploy_arm(_arm, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_result(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodAsync(
        *this,
        "ArmUp",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_arm,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    void HumanCharacterServiceDBusProxy::ArmDown(const HumanCharacterService::Arm &_arm, CommonAPI::CallStatus &_internalCallStatus, std::string &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment> deploy_arm(_arm, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_result(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodWithReply(
        *this,
        "ArmDown",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_arm,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> HumanCharacterServiceDBusProxy::ArmDownAsync(const HumanCharacterService::Arm &_arm, ArmDownAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment> deploy_arm(_arm, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_result(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HumanCharacterService::Arm, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodAsync(
        *this,
        "ArmDown",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_arm,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void HumanCharacterServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace humancharacterservice
      } // namespace luxoft
      } // namespace com
      } // namespace v1
