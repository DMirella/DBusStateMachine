/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_LUXOFT_CHARACTERSERVICE_Character_Service_DBUS_PROXY_HPP_
#define V1_COM_LUXOFT_CHARACTERSERVICE_Character_Service_DBUS_PROXY_HPP_

#include <v1/com/luxoft/characterservice/CharacterServiceProxyBase.hpp>
#include "v1/com/luxoft/characterservice/CharacterServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace com {
namespace luxoft {
namespace characterservice {

class CharacterServiceDBusProxy
    : virtual public CharacterServiceProxyBase,
      virtual public CommonAPI::DBus::DBusProxy {
public:
    CharacterServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~CharacterServiceDBusProxy() { }



    virtual void ArmUp(const CharacterService::Arm &_arm, CommonAPI::CallStatus &_internalCallStatus, std::string &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ArmUpAsync(const CharacterService::Arm &_arm, ArmUpAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void ArmDown(const CharacterService::Arm &_arm, CommonAPI::CallStatus &_internalCallStatus, std::string &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ArmDownAsync(const CharacterService::Arm &_arm, ArmDownAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:



};

} // namespace characterservice
} // namespace luxoft
} // namespace com
} // namespace v1

#endif // V1_COM_LUXOFT_CHARACTERSERVICE_Character_Service_DBUS_PROXY_HPP_

